// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Discord.lnk (1.9kB)
// res/pinned_update.json (12.56kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x23\x65\x18\xc7\x7f\x69\x2b\xda\x93\x11\x43\xa0\x55\x49\xaa\xa6\x08\x3a\x93\x8f\xa6\x21\x4d\x51\x5a\xf3\x61\x4a\x12\x1a\x12\x62\x43\x1d\xa5\xe3\x64\xa0\x43\x1b\x32\x9d\x49\xa1\xad\x78\xf4\x52\x2c\x08\x1e\x0c\x58\x69\x11\x41\x29\x78\x10\x3c\x08\x8a\x78\xf0\x2c\x3d\x54\xf1\x68\x2b\x82\x14\x41\x41\x3c\xd5\x65\x97\x79\x33\x29\x9b\xb4\xcb\x1e\xf6\xb4\xcb\xfe\x87\x79\xbf\x9e\xff\xfb\x7f\x3e\x12\x9e\x29\x02\x1e\xdf\x10\x0e\x7e\x10\x23\xb9\x9b\x73\x10\x04\xfe\xb9\xf1\xdf\xc5\xd0\xda\x89\xe7\x1b\xff\xdb\xa3\xc3\x6b\x27\x9e\xde\x1e\x17\x97\x0b\x17\x7f\xe0\x23\x50\xfe\x6d\xf1\x38\x78\x9e\x32\xbc\x9f\xfe\xfa\x18\x2f\x46\x22\x9f\x8c\x11\x4e\xa7\x14\xae\xe2\x75\xa2\x62\x5e\x2a\x2d\x77\xbc\x64\x0c\x5b\x6b\x59\x0d\xe6\x18\x65\x84\xbf\xbf\x5f\x2a\xbd\xda\x71\x2c\x32\x50\x7f\xce\xe1\xbd\x35\x70\x7f\xf9\xf1\x80\x27\x83\x81\x8d\x46\x0b\x8b\x06\xe0\x67\x85\x98\xab\x5a\xef\x04\xa9\x99\x0d\xb5\xad\xcb\xfa\x96\x0e\xb9\x4b\xe5\x7a\xc7\x79\x1d\xe5\xa3\x09\x87\xbb\x3f\xd2\xaf\xec\x7d\xc5\xe7\xa9\x61\xd2\x40\xa5\x8d\x8e\x8c\xce\x16\x3a\x30\x0e\x38\x25\x7b\xda\x4d\xdf\x99\xa7\xdd\x5b\x05\x60\x0c\x18\x06\x12\xaf\xfd\x3e\xe2\x05\x32\xc6\xf3\x1b\x9b\x7a\x30\x4d\x3a\xa5\xb8\x19\x2a\xb7\xc7\x34\x41\x7f\x06\x41\x24\x82\xac\xd2\xa6\x8d\x89\x4d\x8a\x30\x61\x1a\x7d\x1c\x15\x13\x13\x59\xec\x9b\x84\x79\x0a\x19\x19\xa5\x6f\xec\x57\x55\xb8\x2e\x1b\x3f\x69\x52\xd7\x70\xbb\xfa\x12\x11\x64\xf1\x4e\x11\x21\xca\x38\x12\x12\x26\x16\x2d\x34\x74\x6c\x6c\xaa\xb4\x51\xb1\x68\x13\x1c\x50\xe9\xf9\x78\xc9\xf5\x51\xc3\x46\xc7\xc2\x46\x41\xc3\x42\x65\x87\x6d\x14\xe6\x85\xaf\x8c\x88\x4c\x45\xa1\x28\xd4\x55\xd6\xef\x18\x97\x8c\x21\xce\x7c\xc3\xf0\x28\x1c\x86\x6a\xd5\x6c\xa5\x5c\x59\xcc\x2d\x14\xb3\x21\x65\xde\x34\x33\x6a\x5b\x55\x8a\x2d\x4d\x5d\xbf\xac\xb8\x6a\x9a\xb2\xa1\xb5\xae\xf9\x0f\x3e\x18\x08\x51\xa3\x4a\x96\x0a\x65\x2a\x2c\x92\x63\x81\x22\x59\x42\xf7\x54\xe1\x87\xb8\xdf\xb0\xd2\xed\x3e\x87\x75\x77\xaf\x59\xea\xce\xb6\x64\x6a\x3d\xfb\xbe\xfd\xec\xc5\x8f\x67\x6f\x16\x8e\x3e\x4a\x4c\xce\x9e\x97\x0f\x62\xef\x7e\x3c\x5e\xfa\xe5\xcf\x27\xde\xfb\x20\xb3\xfb\x46\xf3\xeb\xbf\xee\x66\x9f\xf5\xc0\x28\x1c\xee\x01\xd1\x6a\xb9\x7a\xb6\x5b\xcf\x7d\x57\x4c\xa6\xbf\xfd\xff\xc9\x0f\x27\x3b\xcd\x9f\x36\x00\xd1\x4a\x03\x40\x18\xa8\x22\x11\x45\x62\x1a\x89\x98\x58\x4d\x89\x76\x92\x60\x8a\x24\x51\x62\xc4\x89\x21\x11\x27\x22\x9e\xa4\xb0\xc4\x49\x08\x6e\x94\x38\x49\x62\x24\x89\x10\x13\xcf\x8c\x38\x8d\x88\x86\xd4\x83\xe1\x06\x53\x7b\xa1\x78\xb0\x7d\x30\x53\xf8\xe2\xf8\xf4\x44\x3a\xfd\xf9\xdf\x12\xf0\x48\x2f\x98\x67\x9c\x6a\x88\x7e\x29\x63\xb3\xc1\x26\x06\x16\x16\x3a\xeb\xc8\x57\x7a\xd7\xe0\x57\xa5\x8b\x19\xd7\xd1\x57\xfe\x66\xe6\xcb\x3d\x33\xff\x79\x7e\x4e\xfe\xec\xe5\xad\xf7\x1d\xed\x55\x87\x90\x77\xca\xff\x4e\x21\xdf\xa5\x97\x03\x83\x3f\xcf\xad\x00\x00\x00\xff\xff\x6e\xf0\xe7\x2c\x6c\x07\x00\x00")

func discordLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordLnk,
		"Discord.lnk",
	)
}

func discordLnk() (*asset, error) {
	bytes, err := discordLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Discord.lnk", size: 1900, mode: os.FileMode(0666), modTime: time.Unix(1540321391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6c, 0x22, 0x76, 0x62, 0x29, 0xe1, 0xa8, 0x19, 0xde, 0xc6, 0x8e, 0xf1, 0x2e, 0x96, 0x78, 0xe6, 0x7f, 0xf, 0xe9, 0x3d, 0x65, 0xdd, 0x53, 0xae, 0x61, 0x66, 0xdf, 0xc4, 0x70, 0x21, 0x68}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdf\x6e\x1c\x37\xaf\xc0\xef\xf3\x14\xc6\x5e\x1f\xc4\x22\x25\x92\x62\x5e\xa5\x28\x02\xfe\x53\x63\xc4\x89\x7d\xbc\x4e\xcf\x29\x8a\xbe\xfb\x87\x75\x9c\xed\xda\x6d\xd3\xc0\x5f\x07\x71\x7d\x67\xad\xec\x99\xd1\x6f\x7e\x43\x93\x1c\xed\xaf\xaf\xce\xce\x76\x1f\xae\xf2\xd3\x65\xed\x77\x6f\xce\x0e\xc3\xb3\xb3\x5d\x5e\xec\xe3\xea\x26\xdf\xee\xaf\xeb\xf2\x32\xde\x55\xbc\x3f\xce\x9d\x9d\xed\xd6\xa7\xcb\xcb\x93\xf1\xd9\xd9\xee\xdd\xd5\xfe\xf6\xed\xcf\x75\xb3\xbf\xb8\xfa\xb8\x7b\x73\xf6\xc3\x71\xe6\xec\x0c\xfe\xe7\x64\xd0\x4e\x07\xda\xda\x38\x0e\x7f\xfc\x7d\xe6\xfe\x72\x4e\x8e\x77\x72\x8c\xdd\xb5\xc5\x7b\xfb\xa9\xde\xee\xdf\x19\x12\xef\xde\x9c\xed\x44\xc4\xd4\x75\x02\x41\x9f\xde\x85\xb0\xa5\xcb\x9a\xdd\x29\x9a\xac\xe4\xb9\x48\x08\x46\xb0\xa0\x45\xef\xa8\xc2\xc3\xc5\x9a\xf1\x68\x63\xe4\xee\xe4\xe8\x9f\x6e\x0e\x2b\xdb\xbd\xbb\xbd\xbd\xde\xbf\x39\x3f\xcf\xcb\xd7\xf7\x28\xec\xfa\xfa\xf5\xc7\xba\x3d\xcf\x8b\xfd\xed\xcd\xd5\xb9\x5d\x5f\x9f\xef\x6f\xcd\x2f\xeb\xfc\xff\x2e\x3e\x9e\xff\xff\xe4\x73\x78\xdd\x5e\x1f\x96\x74\xfe\x47\x78\xe7\x70\x7e\x60\xf6\xfa\xf3\x1f\xef\xee\x4f\xf7\xdb\x97\xf3\xee\xb2\x2e\x6f\x6d\xff\x00\xdc\xaf\x27\xa0\xbe\x86\xf7\x11\xe0\x47\x88\xef\x20\xf7\x93\x0f\x7e\x3c\x9d\xfd\x23\x68\x7c\x30\xfd\x47\xd4\x8e\xb3\x8b\x2a\xf5\xc1\xd2\xaa\x79\x55\xb5\x56\xea\x13\x3b\xd0\x80\x18\x16\xae\xd4\x49\x7b\x57\xb7\xf4\x99\x94\x01\x23\xd7\xaa\x51\xd2\x60\xf7\xe0\xf8\xdb\xc1\xbe\xb9\xfa\xf0\xe5\x57\xfa\x39\xee\x8e\x27\xfd\xed\xfe\xa7\x1f\x5f\x9d\xdc\x80\xa3\xed\x71\x79\xf5\x29\xf7\xbf\x7c\x8c\xe7\x2c\x7b\x65\x27\x6b\xd9\xc4\xa9\x0b\x75\x73\x0c\x97\x72\x14\xe0\x31\xa8\x25\xc4\xa0\xe9\xdc\xa4\x7a\x6b\x55\x7d\x8e\xf2\x16\x12\xab\xa3\xa2\xcb\x56\xb2\x1f\xd9\xfd\x6b\x5c\x87\xbf\x71\x5d\xa5\x43\x70\x15\x4f\xd7\xd9\x54\xa3\x60\x69\xb2\x8b\x56\x12\xe8\x1a\xe1\xa4\x53\xbb\x94\x76\x5e\x68\x15\x2b\x8a\x47\x4e\xb2\x05\xde\x64\x3b\xd7\x1f\xb0\x7e\xa0\x3a\x7c\xab\xea\x59\xfb\xf7\xb7\x57\xd7\x6f\xe3\xea\xa6\xbe\xab\xed\xf8\x55\xdb\x47\x44\xaf\xa9\x2b\x10\x44\x27\x4b\xf2\x54\xe6\x98\x43\xa6\x31\x12\x89\x66\x72\x3f\xdc\x8a\x22\xc9\x1e\x8e\x8e\x62\xe4\xce\xa5\x9a\xab\x6f\x65\xfb\x29\xbe\x73\xfc\x9e\xc2\x8f\x7f\x4e\x78\x63\x9d\xa2\x86\x38\x0c\xba\x54\xc3\xd5\x73\xd6\x20\x1a\x3d\x15\xc5\x96\x16\x32\x91\xe3\xe1\x9f\x2c\x92\xa3\x28\x1c\x9e\x85\x50\x5a\x86\xb9\xa1\xf0\x8f\x71\x9f\x38\x3f\xbe\xdd\xf9\x9f\xec\x43\xbd\xfd\x74\x7b\x71\xb9\x7f\xc6\xf1\xdd\x19\x9b\x06\x0c\x0b\x74\x72\x5e\xcd\x01\x62\x3a\x71\x46\xba\x8c\x58\x3e\x4b\x45\x92\x46\x4d\x4a\x16\xe8\xda\x46\x71\xcb\x20\x66\x87\xb5\x95\xf1\xbf\xc3\x7b\x31\x01\x3e\xa9\xad\x24\xb4\x4c\x00\x06\xc2\x11\x93\x06\x77\x1c\x87\xbc\x46\xc5\xb4\x98\xd7\x6c\x32\xd4\xb4\x29\xb5\xbe\xca\xd2\xbb\xfa\xaa\x1a\x1d\x70\x3b\xdf\x1f\xc2\x7e\x5a\x84\xff\x50\x79\x61\xcf\x59\xf4\xde\xd0\x25\x55\xb2\xa2\x1c\xd6\x9c\x90\xb6\xca\x33\x6a\xaa\x0f\x94\x9c\xc2\x00\x01\x70\x88\xee\xa6\x8b\x5d\xd9\x47\x9f\x0d\x08\x1c\x78\x2b\xd1\xef\xb8\xbd\x18\xc7\xab\x92\xba\x09\x61\x31\x84\xa7\x93\x49\x11\x00\x0d\x43\xb3\x6c\x73\x6a\xd5\x1a\x4d\x1a\x27\x0d\x65\x89\x34\xad\x29\x3a\xc7\xf4\x9c\x43\xb7\x73\xfc\xc8\xf9\x69\x7a\x3f\xf7\x38\xbe\x6a\x75\xf4\xc6\x02\x1e\x6c\x4d\x66\x8f\x60\x99\x0b\x81\x62\x06\xf4\x45\xde\xa8\xb9\x2c\x68\x99\x16\x90\x5c\x89\xc6\xcd\x1b\x58\x9b\xc3\xb6\xd2\xfb\x65\x85\xf0\x96\x45\x62\x13\x19\x70\xa9\x59\x15\x23\xf4\x31\x57\xe1\x04\x6e\x91\x44\xd9\x9c\xa7\xa3\xf4\xae\x92\xd2\x9b\x2d\xc2\x49\x3a\xd8\xda\xea\x1b\x86\xf0\xff\x32\x7a\xef\xeb\xfd\xcd\xc5\xed\x33\xf6\xdb\x60\x15\x8d\x58\x91\x40\x66\x4b\x1a\xa4\x0f\x5b\x4b\xb2\xcd\xc5\x10\xca\x5c\xab\x93\x34\x2d\xa4\x3e\xa9\x03\x7b\x71\x67\xb1\x58\x83\xe6\x66\x7e\x7f\x06\xf7\x62\x04\x8f\x15\xd0\x80\x82\x3d\xb0\xe9\x12\x18\x87\x3a\x88\xa1\x59\x18\x64\x13\x46\x84\x43\x7d\x5f\x29\x6b\x8e\x0e\x8c\x34\x40\x54\x86\x27\x31\x3c\x28\x80\x36\x03\xfd\x34\xc3\x7f\xbe\xba\x88\xef\x5b\x7a\xf6\xaf\x0a\xde\x81\x57\x1b\x8b\x0f\x6e\xe7\x2c\x33\x66\x44\x33\x98\x32\xd2\x72\x76\x1f\xe1\x5c\x9d\xa6\xf4\x98\xac\x99\xc9\x36\x0f\xc1\xc8\xa1\x00\xa0\x6d\x25\xf8\x1d\xb7\xf3\xfe\x2f\xa9\x39\xff\xae\xa1\x88\xeb\x50\x74\x92\xb5\x80\x62\xea\x7d\x90\x57\xd1\x5a\x3d\x9c\xca\xd0\x51\xfb\xd4\xe5\xd6\xca\x0d\x5b\x8c\x45\x31\x46\x4e\x19\x92\x12\xca\x1b\xe6\x27\x47\xce\x0f\x8a\xcd\x6f\xee\x25\xbe\xbf\xb9\xd8\x5f\x3f\xe3\xf8\x2d\x3e\xa4\xd3\x48\xf4\x43\x56\xe8\x9d\x12\x86\x76\x14\x50\xae\xc5\xd8\x01\x27\x02\x02\x11\x44\x0d\xd0\x42\xab\xb2\xac\xb0\x51\x50\x6d\xbb\xfc\xe4\x8e\xdb\xcb\x09\xdf\xa0\x22\x3c\x11\x60\xb9\x4b\x6f\x0b\xdb\x08\xe9\x92\x8d\x6a\xb6\x43\xd6\x37\xbc\x35\x95\xbe\xec\x10\x6e\xa2\x7b\x61\xad\x0c\x60\x6e\xd8\xc4\xb7\xd3\xfb\xc8\xf9\x69\xd1\xfb\xe6\xfa\x39\x37\xc9\x13\x1b\x2c\x0d\x6c\x91\x66\xe5\x4b\x2d\x5c\x7a\x02\xcb\x8a\x2e\x43\x46\xe7\xc2\xd9\x43\xb1\x95\xd8\xea\xe2\x44\xa4\x48\xb6\x82\x9b\x65\x6d\x25\xf7\xcd\xf5\xcb\x69\x8f\x03\x02\x06\x51\x6b\xd3\x78\x84\x2e\xe8\xc1\x03\xa0\xc6\x1a\xab\x51\xf0\x68\x7d\xe9\xf2\xa4\x2a\x74\xe1\x60\x63\x55\x6e\xcd\x16\x16\x75\xdf\x30\x72\xdf\x53\x7e\x9a\xd8\x57\x3f\xd7\xcd\xa5\xfd\x82\xcf\xd8\x6e\xeb\xa4\xb1\x6a\xb6\x39\x89\xb2\x0c\x27\x8b\x34\x4f\xe1\x43\xc2\x0d\x36\x78\x6a\xc4\xec\x16\x89\xc2\x5c\x39\x49\x46\xf0\x2c\xae\x15\xb2\x5d\xe7\xe4\x0b\xba\x17\xa3\xf8\x04\x75\x69\x42\xd3\x75\xb8\xcf\x44\x32\x5d\xd6\x47\x17\x1d\xb5\x4c\x7c\x35\x4a\x34\x68\x25\xb1\xd6\x48\x99\x54\x3c\xb9\x77\xe8\x96\x64\x63\x3b\xc5\x4f\x51\x3f\xb1\x3d\xf8\xe8\x95\xff\xf3\xd3\xdc\x5b\x2e\x1f\x32\x56\x0e\xf2\xd0\xe1\x63\x84\x81\xc0\x5c\xba\x92\x18\x55\x10\x70\x95\x63\x05\xc0\xac\x1e\xd3\xc4\xb5\x59\xc2\x02\x1e\x6d\xb3\x4e\xf8\x3d\xb9\x17\x63\xf9\x5a\x0a\x0b\x75\x35\x49\x01\x11\x67\x4c\x1a\x49\xbe\x2a\x83\x09\x69\x96\x8b\xe3\x40\x5b\xa8\xd3\x14\xd6\x98\x33\x21\xcd\x75\x45\xc9\x03\xce\xdb\x91\x7e\x9a\xe4\x75\x73\x79\x58\xef\x33\x96\x3c\x82\xc0\x2d\x56\x45\xa8\xdb\x18\x28\x82\xda\x6c\x4d\xd0\xd1\x56\x9b\xa9\x95\xe3\x50\x50\x9a\x4e\x56\x13\x6b\x2c\xd4\x78\x15\x84\xeb\x54\xdf\x4a\xf2\x7b\x72\x2f\x46\xf2\x6c\x87\x30\x5d\xee\x96\xa9\xde\x18\xb2\x6b\x77\xcd\x36\x70\xf0\x02\xc2\x1e\x98\x36\x17\x35\x6a\x40\x50\xc5\x3c\x66\x7a\xf1\x9c\x93\xd7\xac\xed\x24\x3f\x21\xfd\x34\xc9\xdf\x5d\x5d\x3d\x67\xc3\xc7\xb0\x56\xca\xc2\x7d\x15\x4e\x5f\x80\xea\x4b\xdb\xba\x4b\x02\x63\xa2\x87\x96\x8e\x4a\x94\x01\xa3\xc6\x18\x4a\x91\x63\x31\xb0\x40\x0c\xd8\x6c\xc3\xca\x01\xdb\x8b\xd1\x1b\x67\xf7\x26\x03\xb0\x99\x6a\x13\x56\x59\x63\xad\xd1\x31\xbc\x27\x18\xf8\x70\x01\xcc\xf0\x1e\x53\xd0\x08\x7a\x67\xd5\x39\x8d\x29\x9a\xc6\x86\xc9\xf8\x17\xcc\x4f\x6c\x12\x5e\xfc\x74\x71\x69\x1f\x6f\xbf\x6f\xa3\xf0\xeb\x82\x37\xd4\xd1\x4b\x1a\xa1\x60\x2f\x20\x0f\x1b\x34\x5b\xaf\x1a\x50\x1e\x78\x50\x3e\x7a\x42\x15\xb5\x16\xc5\x21\xb0\x48\xbd\xc8\x17\xf2\xca\xcd\x3a\x29\x47\x76\x2f\xc6\xf2\xd1\x5a\xd3\xd6\x0b\x1c\x53\xad\xa0\xa2\x71\x97\x00\xe9\x73\x39\x05\x4f\xe8\x93\x27\x66\x10\xa0\x69\x09\xcc\x4e\x33\x13\x66\xce\x99\xe2\xb6\x61\xb3\xf0\x94\xf5\x13\x77\x64\x5d\xec\xaf\xed\x36\xde\x3d\x63\xd3\x95\xcb\x71\x72\x43\x9d\xeb\xe0\x73\x08\xd2\x68\xc2\xb3\xf9\x5d\xda\xad\xb3\x32\x95\xcd\xb9\x41\x88\x80\x69\x9f\x29\x50\xa1\x25\x0a\xb8\x59\xb2\xf2\x05\xdd\xbf\x46\xf4\xbf\xed\x8a\x57\x46\x5f\x69\xd3\x61\x0a\x20\xb5\x19\xd4\xe9\xc0\x5c\x48\xfb\x82\x60\xf4\x5a\x03\x8a\xbc\x5a\x46\x75\x45\x44\x8f\x99\xc8\x84\x35\x62\xc3\x9d\x58\x27\xa8\xbf\x71\x93\xed\xab\xfb\x5b\xf0\xd0\xe6\xbf\x82\x7d\xc4\x7c\x04\x7c\xb4\xf7\x1e\xea\x9f\x75\x44\x26\x88\x23\x6b\x86\xb1\x2b\xe4\x00\x9b\x38\x71\xa8\xf2\xdd\xbb\xe0\x4c\xb6\x96\xb9\x86\x6b\x47\x62\x5d\x29\x51\x58\x46\xb6\x64\x61\x7c\xd9\x01\xfe\x8f\x90\x7a\x64\xe0\xe7\xa5\x3f\x32\xef\xf8\x80\xff\xa5\x71\x27\xb6\x9d\x98\x76\x62\xd9\xd1\xb0\x3f\x7b\x4e\x5b\x37\x06\x64\x03\x2d\x28\x3a\x54\xcb\x3d\x01\xfc\xb0\x7a\xac\x18\x04\x33\xdd\x2c\x1a\xcc\x56\x00\x22\x33\x87\xf7\x46\xaa\xe6\x15\x7d\x1e\xf5\xf9\x67\x80\x9c\x7a\xb2\x3b\x3a\x71\xb7\x80\xdd\x4d\xfd\xef\xa7\x8b\x9b\x3a\xed\x47\xfc\xf0\x28\x2e\x9e\xee\x54\xfd\x8b\xfa\xee\xd1\xc7\x27\xdf\x5a\x78\x34\xf3\x79\xd7\xc8\x9f\xbe\x89\x3c\x5c\xd2\xab\xdf\x5e\xfd\x27\x00\x00\xff\xff\x3c\xd6\x80\x08\x10\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12560, mode: os.FileMode(0666), modTime: time.Unix(1646602950, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x49, 0x3, 0xfc, 0x86, 0x12, 0x92, 0x76, 0x46, 0xa7, 0x1d, 0x83, 0xf4, 0xaa, 0x88, 0x9b, 0xcf, 0x68, 0xb0, 0x6, 0x36, 0x4b, 0x3f, 0x67, 0x83, 0x6a, 0xfa, 0xfa, 0x67, 0x3, 0x76, 0x1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Discord.lnk":        discordLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Discord.lnk": {discordLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
