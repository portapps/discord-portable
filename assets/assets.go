// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Discord.lnk (1.9kB)
// res/pinned_update.json (12.56kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x23\x65\x18\xc7\x7f\x69\x2b\xda\x93\x11\x43\xa0\x55\x49\xaa\xa6\x08\x3a\x93\x8f\xa6\x21\x4d\x51\x5a\xf3\x61\x4a\x12\x1a\x12\x62\x43\x1d\xa5\xe3\x64\xa0\x43\x1b\x32\x9d\x49\xa1\xad\x78\xf4\x52\x2c\x08\x1e\x0c\x58\x69\x11\x41\x29\x78\x10\x3c\x08\x8a\x78\xf0\x2c\x3d\x54\xf1\x68\x2b\x82\x14\x41\x41\x3c\xd5\x65\x97\x79\x33\x29\x9b\xb4\xcb\x1e\xf6\xb4\xcb\xfe\x87\x79\xbf\x9e\xff\xfb\x7f\x3e\x12\x9e\x29\x02\x1e\xdf\x10\x0e\x7e\x10\x23\xb9\x9b\x73\x10\x04\xfe\xb9\xf1\xdf\xc5\xd0\xda\x89\xe7\x1b\xff\xdb\xa3\xc3\x6b\x27\x9e\xde\x1e\x17\x97\x0b\x17\x7f\xe0\x23\x50\xfe\x6d\xf1\x38\x78\x9e\x32\xbc\x9f\xfe\xfa\x18\x2f\x46\x22\x9f\x8c\x11\x4e\xa7\x14\xae\xe2\x75\xa2\x62\x5e\x2a\x2d\x77\xbc\x64\x0c\x5b\x6b\x59\x0d\xe6\x18\x65\x84\xbf\xbf\x5f\x2a\xbd\xda\x71\x2c\x32\x50\x7f\xce\xe1\xbd\x35\x70\x7f\xf9\xf1\x80\x27\x83\x81\x8d\x46\x0b\x8b\x06\xe0\x67\x85\x98\xab\x5a\xef\x04\xa9\x99\x0d\xb5\xad\xcb\xfa\x96\x0e\xb9\x4b\xe5\x7a\xc7\x79\x1d\xe5\xa3\x09\x87\xbb\x3f\xd2\xaf\xec\x7d\xc5\xe7\xa9\x61\xd2\x40\xa5\x8d\x8e\x8c\xce\x16\x3a\x30\x0e\x38\x25\x7b\xda\x4d\xdf\x99\xa7\xdd\x5b\x05\x60\x0c\x18\x06\x12\xaf\xfd\x3e\xe2\x05\x32\xc6\xf3\x1b\x9b\x7a\x30\x4d\x3a\xa5\xb8\x19\x2a\xb7\xc7\x34\x41\x7f\x06\x41\x24\x82\xac\xd2\xa6\x8d\x89\x4d\x8a\x30\x61\x1a\x7d\x1c\x15\x13\x13\x59\xec\x9b\x84\x79\x0a\x19\x19\xa5\x6f\xec\x57\x55\xb8\x2e\x1b\x3f\x69\x52\xd7\x70\xbb\xfa\x12\x11\x64\xf1\x4e\x11\x21\xca\x38\x12\x12\x26\x16\x2d\x34\x74\x6c\x6c\xaa\xb4\x51\xb1\x68\x13\x1c\x50\xe9\xf9\x78\xc9\xf5\x51\xc3\x46\xc7\xc2\x46\x41\xc3\x42\x65\x87\x6d\x14\xe6\x85\xaf\x8c\x88\x4c\x45\xa1\x28\xd4\x55\xd6\xef\x18\x97\x8c\x21\xce\x7c\xc3\xf0\x28\x1c\x86\x6a\xd5\x6c\xa5\x5c\x59\xcc\x2d\x14\xb3\x21\x65\xde\x34\x33\x6a\x5b\x55\x8a\x2d\x4d\x5d\xbf\xac\xb8\x6a\x9a\xb2\xa1\xb5\xae\xf9\x0f\x3e\x18\x08\x51\xa3\x4a\x96\x0a\x65\x2a\x2c\x92\x63\x81\x22\x59\x42\xf7\x54\xe1\x87\xb8\xdf\xb0\xd2\xed\x3e\x87\x75\x77\xaf\x59\xea\xce\xb6\x64\x6a\x3d\xfb\xbe\xfd\xec\xc5\x8f\x67\x6f\x16\x8e\x3e\x4a\x4c\xce\x9e\x97\x0f\x62\xef\x7e\x3c\x5e\xfa\xe5\xcf\x27\xde\xfb\x20\xb3\xfb\x46\xf3\xeb\xbf\xee\x66\x9f\xf5\xc0\x28\x1c\xee\x01\xd1\x6a\xb9\x7a\xb6\x5b\xcf\x7d\x57\x4c\xa6\xbf\xfd\xff\xc9\x0f\x27\x3b\xcd\x9f\x36\x00\xd1\x4a\x03\x40\x18\xa8\x22\x11\x45\x62\x1a\x89\x98\x58\x4d\x89\x76\x92\x60\x8a\x24\x51\x62\xc4\x89\x21\x11\x27\x22\x9e\xa4\xb0\xc4\x49\x08\x6e\x94\x38\x49\x62\x24\x89\x10\x13\xcf\x8c\x38\x8d\x88\x86\xd4\x83\xe1\x06\x53\x7b\xa1\x78\xb0\x7d\x30\x53\xf8\xe2\xf8\xf4\x44\x3a\xfd\xf9\xdf\x12\xf0\x48\x2f\x98\x67\x9c\x6a\x88\x7e\x29\x63\xb3\xc1\x26\x06\x16\x16\x3a\xeb\xc8\x57\x7a\xd7\xe0\x57\xa5\x8b\x19\xd7\xd1\x57\xfe\x66\xe6\xcb\x3d\x33\xff\x79\x7e\x4e\xfe\xec\xe5\xad\xf7\x1d\xed\x55\x87\x90\x77\xca\xff\x4e\x21\xdf\xa5\x97\x03\x83\x3f\xcf\xad\x00\x00\x00\xff\xff\x6e\xf0\xe7\x2c\x6c\x07\x00\x00")

func discordLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordLnk,
		"Discord.lnk",
	)
}

func discordLnk() (*asset, error) {
	bytes, err := discordLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Discord.lnk", size: 1900, mode: os.FileMode(0666), modTime: time.Unix(1540321391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6c, 0x22, 0x76, 0x62, 0x29, 0xe1, 0xa8, 0x19, 0xde, 0xc6, 0x8e, 0xf1, 0x2e, 0x96, 0x78, 0xe6, 0x7f, 0xf, 0xe9, 0x3d, 0x65, 0xdd, 0x53, 0xae, 0x61, 0x66, 0xdf, 0xc4, 0x70, 0x21, 0x68}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x08\xa3\x0a\x3a\x65\x00\x03\x70\x69\x6e\x6e\x65\x64\x5f\x75\x70\x64\x61\x74\x65\x2e\x6a\x73\x6f\x6e\x00\xdd\x9a\x51\x6f\x1c\x37\x12\x84\xdf\xfd\x2b\x0c\x3d\x1f\x2c\x76\x37\x9b\x64\xe7\xaf\x04\x81\x41\x76\x93\xb1\x60\xc5\xd2\x69\xe5\xdc\x05\x41\xfe\xfb\xd5\x38\xf2\x7a\x25\x38\x87\x83\x2e\x03\x2c\xf6\xc9\x9e\x19\x69\x56\x53\xfb\x4d\xb1\xaa\x67\x7e\x7f\xf3\xf6\xed\xd5\x2f\x77\xf1\xf9\x76\x1e\xae\x7e\x78\xfb\x3b\x36\xb1\x23\x6e\x0e\x7e\xf7\x10\xef\x3f\xdc\xdd\x7d\x3c\xee\xc5\xfe\xf5\xf9\xf6\xf6\x64\x1b\x7b\x3e\xdc\x1d\x1e\xdf\xff\x3a\x1f\x0e\x37\x77\x9f\x70\xe4\xc7\xe3\x91\xb7\x6f\xe9\x1f\x27\x1b\xe9\x74\xc3\x12\xa7\xe3\xe6\x4f\xdf\x8e\x3c\xfd\x21\x27\xe7\x3b\x39\xc7\xd5\x7d\xf7\x8f\xfd\xe7\xf9\xfe\xf0\xa1\xb3\x16\x1c\xbc\xaa\xb1\xa8\x99\x66\xd6\xa4\x92\x8b\x2d\xe5\x14\x25\x22\x5a\xf3\x4e\xd6\x94\x95\x78\x31\x7e\x82\xfa\x72\x96\x2e\xab\x0d\x59\x36\xa3\x0c\xcb\xb9\x5d\x9d\x9c\xfd\xf3\xc3\x76\x65\x57\x1f\x1e\x1f\xef\x0f\x3f\x5c\x5f\xc7\xed\xbb\x27\x11\xfa\xfd\xfd\xbb\x4f\xf3\xf1\x1a\x9b\x8f\x0f\x77\xd7\xd8\xbc\x3e\x3c\xf6\x71\x3b\xaf\xff\x75\xf3\xe9\xfa\xdf\xad\x5c\xd3\xbb\xf4\x6e\xbb\xa4\xeb\x53\xd9\xae\xe9\x7a\x53\xeb\xdd\x9f\xbf\x76\xf5\xf4\x41\x7f\x7c\xfd\xc4\xab\x98\xb7\x8f\xfd\xf0\x4c\xb2\xdf\x4f\x24\xfa\x6f\xc2\xbe\x90\xf6\x85\xb8\x9b\xbc\x64\x27\x3b\x7e\x3a\x3d\xfa\x5f\x25\xfe\xae\xc8\xbd\xca\x9a\xae\xad\x52\x12\xb6\x28\xa5\x92\xba\xa4\x08\xeb\x53\x6a\x68\xaa\xd4\x28\x6b\xb4\x45\xb5\xfb\xb2\xde\x97\x49\x9e\xde\x66\x26\x09\x9b\x57\xcf\xce\xbf\x87\xcc\x0f\x77\xbf\x3c\x1d\x24\xbb\xa6\xab\xe3\xc7\xfd\xf1\xf4\xbf\x9f\xde\x9c\x48\x7f\x64\xfb\xe7\xfe\xcb\x7c\xff\xf9\xf1\xe6\xf6\x70\xc6\x84\x37\x1f\x65\x0d\xad\xb9\x48\x4f\xea\xa9\x54\xe1\x96\x7c\x36\x31\x5d\x2c\xd9\x9c\x54\x9b\x17\xef\xd3\xa4\xe6\x31\xeb\xac\x8d\x06\x81\x76\x9f\x1e\x69\x2f\xc2\xbf\x89\x77\x31\x9c\x4b\x2d\x53\xc4\x64\x8a\xda\x92\x09\xe1\x45\x52\x77\xb8\x0a\x79\x6d\xe1\x90\xbf\xb5\x3a\x44\x24\xa8\xa8\x42\xfe\xbe\x16\x71\x1e\xc9\x6b\x67\x1b\xfb\x71\xfe\x5c\xec\xd7\xd1\x3e\x1f\x6e\xb7\x4b\x3e\x63\xd4\x3d\x75\xd8\x08\xb7\x5e\xa6\xbb\x69\xa7\xaa\x15\x46\xce\x4c\xc2\x93\xf1\xcf\x98\xad\x7b\x2e\x03\x16\x4e\xc5\x68\xae\x2e\xd6\x9b\xf3\x68\x29\xd5\x4c\x7b\xa1\xfe\xa4\xdc\xc5\x70\xee\x95\xc2\xf3\xac\x35\x79\xe4\x51\x6a\x57\x9c\x9e\x4d\x34\x4b\xc9\x3c\x72\xc3\x7d\x50\xa5\xf4\xb6\x74\xb4\x82\xc5\x32\xbb\x8a\x51\xb4\x4c\x63\x55\xd3\xfd\x38\x3f\x51\xfa\x75\x90\xbf\xcc\x31\xe7\x07\x39\x47\x42\x3e\xd1\x9c\x6b\x1d\x45\xc3\x8b\x94\xc5\x9c\xcb\x12\x78\x79\x2b\xd1\x66\x1f\xea\xab\xe6\x9a\x32\xd0\x6e\x9a\x92\x14\x2d\x96\xc5\x46\x6d\x2a\x7b\x41\xfe\xa4\xdc\xc5\x40\x2e\xb0\xf1\x4c\x25\x5b\xaa\x75\x71\x95\x91\x39\xb2\x08\x11\x56\xd1\x41\x39\x49\x9a\x38\x56\x52\xca\x58\x38\xbb\x21\xdb\x68\x6a\x6d\x36\xd6\x9a\x08\x4b\xe9\x7e\x90\x9f\x28\xfd\x3a\xc8\x0f\xf7\xf3\xf6\xd6\x3f\xcc\xb3\x36\xf3\xde\xa3\x8a\x4b\x8b\xa5\x3a\x11\x1f\x7b\x83\xae\xda\x9d\x1c\x19\xa5\x43\x76\x5e\xad\xe5\xd2\x26\xd6\xd2\xce\xe4\xd6\xc8\xb6\x98\xe9\x6b\xa4\x3e\x96\xee\xc5\xf9\x37\xf1\x2e\x06\xf5\x48\x9d\x7b\x12\xa7\xae\x39\x95\x95\xca\x40\xee\x5b\xb0\xf3\xac\x5d\x59\x58\xac\xad\xcc\x5c\x07\x1c\xdf\x16\x43\xfe\xb9\xf2\xea\x41\x0d\x5d\x89\x25\xf6\x43\xfd\xb9\xd8\xaf\xa3\xfd\xe1\xde\xcf\x18\xf3\x4c\x0e\x6b\x19\xb5\x94\x1c\x82\x14\x92\x7c\x8c\xb9\xbc\x49\x6d\x1d\xad\x08\x61\x9d\xd1\x89\x26\x7c\x46\x5b\x82\xdd\xf7\x55\x47\x5e\x53\xf0\x75\x59\x4c\xae\x7b\x61\x0e\xd5\x2e\x86\xef\x94\xba\x15\x24\x0f\xc7\xba\x39\xe0\x14\x46\x65\xa4\x55\x63\x93\x7d\x0c\xa3\x8c\xc5\x54\x6b\x05\xf0\xcb\xc6\x6a\x16\x20\xdb\x45\xea\xf4\xba\xc2\x99\xf7\xe3\xfb\x49\xe5\xd7\x81\x1d\xf3\xf0\xf1\xf1\xee\xfe\x3d\x36\xe6\x19\x13\x1e\x3c\x57\xe9\x5f\x3a\x0f\xc5\x46\x6f\x81\x55\x8f\x81\x5a\x24\xc4\xc8\x26\x52\xaa\x5a\xdb\x02\x63\x5a\x73\x2a\x2a\x2a\x51\xb5\x6c\x6a\x19\x0b\x2e\xed\x66\xe4\xa7\xf2\x5d\x0c\xea\xa8\xef\x9d\x12\x2e\xb3\x73\x56\xa4\x13\x33\x8b\xd5\x87\x0c\x59\x75\x41\xcc\x16\x70\x1a\x2b\xad\x86\x23\x9a\x43\xfa\xb4\xcd\x64\xb4\x87\x0c\xe3\x5e\xd6\x7e\xa8\xbf\x94\xfb\x75\xcc\x9f\xfb\xb4\xa5\x06\x0f\x51\xe4\x10\x75\x9b\x90\xba\x93\xa5\x05\x17\x9f\x31\x7d\x48\x5b\xec\x39\x53\xe7\xb5\x5a\x25\xd4\xd5\x05\xdb\x77\x59\x94\x7b\xc9\xc9\xeb\xdc\xcd\xce\x2f\x6b\xd0\x52\x78\x98\xba\xe4\x96\x1b\xfc\xb9\xc6\x4c\xd4\xf2\x18\x88\xe7\x5c\x66\x6e\xf0\x70\x41\xf9\x01\xeb\x0d\xc5\x9f\x98\x03\xf7\x43\x59\x9b\xe9\x20\xc8\x8c\xba\xe3\x40\xf1\xff\x9c\xb1\xf8\xed\xdd\xe7\x38\xfc\xf6\xe9\x9c\x13\x0b\x12\xa2\x26\x85\xaa\x63\x88\xd5\x66\x0b\xe9\x3b\x10\x08\x6b\xee\x99\x14\xd1\x5c\x06\xd6\xcf\xa9\x03\x21\xbc\x34\xf7\x5a\xa6\xd5\xde\x5b\x87\xf2\xcb\xe6\x6e\x53\x96\xa3\x76\x97\x83\x79\x6e\x13\x61\xbc\xe4\xe5\xf0\xe8\x0c\xcf\xae\x13\x09\x11\xa5\x87\x11\x5f\x94\xd1\x39\x7b\x58\x82\xd6\x54\x4a\x9d\xb8\x03\x96\x8f\x68\x75\x9b\xad\x4f\xa9\x69\x3f\xcc\x9f\x69\xfd\x3a\xd4\xef\xa0\xc3\x6d\xff\x8d\xcf\x98\xf4\x4e\x8a\x24\x3e\xb1\x76\x4a\xa3\x54\x37\x73\x19\x65\xaa\x59\x17\x63\xaa\x65\xb3\x18\x4d\x88\x8e\xd6\x97\xb6\x06\x7f\x9f\x4d\xeb\xec\x8a\x75\x75\x7b\xac\xb1\x17\xe9\x5f\xa5\xbb\x18\xd0\x79\xf0\x92\x40\xe1\x37\x28\x8d\x7a\xe3\xbd\xdb\xdc\xda\xbc\xd1\xe4\x6e\x0b\xdf\x42\xea\x1a\xc8\x8b\xe2\x6a\x2b\xc1\xfa\x71\x03\x34\x4f\xe8\x4c\x05\xbe\xb3\x1f\xe8\xa7\x52\xbf\x8e\xf3\x5f\xef\x6e\xfc\xac\xe3\xf9\x32\x94\x7a\xa5\xb4\x06\x7a\x52\xa8\xf4\x3a\x50\x86\x62\x52\xf1\x9a\x53\x5a\x89\x61\x26\xb4\xcd\x08\x5a\x6c\x13\xf5\x94\x90\x1f\x59\x17\x6a\x2a\x95\xf0\xbd\x20\xff\xa2\xdb\xc5\x10\xbe\x8c\x51\x29\x8d\x67\x62\x9d\xa1\x2b\x05\x29\x74\x94\x30\x94\x1f\x86\xc9\x20\xc0\xf4\xcc\xa3\x0e\x44\xc4\x40\x11\x42\x4d\x8d\x41\x59\xdd\xb9\xe3\x0b\xd8\x8f\xf0\xa3\xce\xaf\x9c\x25\xce\x8f\x0f\x37\x8f\x67\xcc\x37\xca\x64\x47\xfb\xec\x8e\xba\x89\x1c\x52\x0c\x4e\x6e\x64\x73\x1b\x69\x81\x66\x1d\x81\x4a\x84\x23\x9b\xd8\x91\xa2\x56\x5d\xdc\x1a\x8e\x2d\x0a\x1b\x6b\x37\x13\xff\x53\xb8\x8b\x01\x9c\xcc\xb5\x0e\x2e\xd6\xfb\xcc\xe8\x9d\xb9\x36\x5a\x1c\xad\x98\x8d\x16\x79\xad\xdc\x93\xcf\x25\x68\x43\x39\x62\x1b\x33\xe6\xa4\xc1\xe8\xfd\xc9\x49\x72\xde\x71\x86\x78\x14\xfa\x95\x63\x96\x9b\xc3\x7d\x7f\xf4\x0f\x67\xcc\x78\xe9\xb1\x6a\x14\x46\xf2\xb3\x01\xbf\x58\x83\xb9\xa0\x89\x8e\xb4\xd5\x1d\xa9\xea\x4c\x6b\x84\xa0\x70\xa6\xf0\x92\xa5\xc9\xe4\x8a\x1f\xa5\x3e\xd8\x79\xbf\x11\xcb\x93\x74\x17\x44\x79\x55\x52\xce\x6c\xe8\x9c\xad\x08\x4a\xce\x26\x7a\x4b\x63\x02\xf9\x48\x13\x4e\x43\x35\x99\xf9\x70\x16\x4d\x82\x45\xb5\x68\xdf\x9e\x87\x66\xfc\xc6\x8e\x93\xc4\x53\xa9\x5f\xf9\xe8\x73\xc6\x4d\x3f\x63\xc8\x7d\xe6\x85\xea\x43\x36\xca\xc8\x1d\x69\xa4\x23\x76\xcf\x41\x8d\xca\x82\xa1\x0f\xc9\xc1\xc2\x59\xd0\xf2\xa9\x7b\x9f\x43\x4d\x2c\x4d\xd5\x45\x62\xb6\x5f\x1a\xff\xa2\xdb\xc5\x10\xce\xe6\x39\x67\xf6\xd9\x09\xa6\xa2\x70\x8a\x15\x9a\x87\x94\x04\x4f\x51\x94\xcd\x84\xe0\x82\x7c\x62\x9b\xa5\x14\xa4\x44\xca\x62\x88\x8b\xb2\x0d\x1d\x35\x76\x1c\x20\x1e\x75\x7e\x1d\xde\x58\x04\x0e\xf7\x67\x8c\xb7\xa0\xc0\x37\x24\x3d\x2e\x29\x23\x82\x04\x73\x28\xaa\x66\x49\xe2\x79\x45\x8b\xee\x8d\xbd\x0f\xed\xc9\x26\x16\xcc\x84\x5b\x00\xe5\xc8\xa3\x0a\xc9\xe0\x51\xf6\xc2\xfb\x8b\x6e\x17\x83\x77\x9a\xad\xd4\xb9\x5a\x5b\xe2\xc8\x84\xf2\xe5\xad\xc4\x11\x59\x18\xc6\x12\xdb\xb4\xca\xd1\xfa\xcb\x92\x92\x27\x1b\x76\x8b\x66\x27\x9f\x51\xfb\x14\x73\xdb\x0f\xef\xa3\xce\xaf\xac\x99\x37\x3f\xdf\xdc\xf6\x4f\x8f\xe7\x5c\x35\x7d\xb0\xd6\xc5\x9c\x90\x40\x66\xa0\xfd\xf8\x96\xc7\x99\xa8\xb5\xb4\xd6\xcc\xc3\x51\x3d\x27\x00\x5f\xc3\x52\xf6\x41\x40\x7f\x8c\xd6\x5a\xaf\x44\x6a\x7d\xb7\xaa\xf9\x55\xbb\x8b\xc1\x5c\x93\xa3\xa7\x37\xea\x8b\xd0\xe1\xb7\x17\x11\x2b\xdc\x42\x66\x2a\xae\x6e\xb0\x8f\x45\xee\x32\x07\xa2\x38\x97\x55\x29\x25\x87\xe7\xe8\x10\x44\x78\x33\xda\xf1\x89\xfe\x33\xad\xff\x47\xd4\xdf\x3c\x7d\x07\xcf\x79\xfe\x2b\xb5\x8f\xda\x1c\x15\x3e\xf2\xfb\xa4\xea\xf7\x7c\xc1\xac\x86\x9a\x22\x14\x37\x89\x39\x1b\xf1\xda\x1e\x25\x04\x8e\xa7\x42\x90\xcf\xa8\x92\xa1\x33\x22\xf6\xd1\xda\x40\x45\xd6\x26\x13\x0d\x69\xd0\xec\x49\xb0\xbf\x45\xaa\x17\x08\xfe\x79\xe9\x2f\xd0\x3b\xde\xe2\x7f\x89\xdc\x09\x22\x27\xa8\x9d\x60\x76\x44\xec\x7b\x2f\x0d\xf7\xe8\xdb\x02\x34\x43\xc9\x0b\xf1\x58\x8d\x25\x73\x57\x15\xac\x48\x14\x1e\x23\xd1\xb6\x23\x89\x94\x82\x78\x35\x93\xd4\x04\xd6\x28\x50\xa3\x4f\x26\xcf\x7f\x8f\x20\xa7\x9c\x5c\x1d\x99\xf8\x72\x01\x57\x0f\xf3\x9f\x9f\x6f\x1e\xe6\xe9\xab\x7b\x3f\xbe\x28\x70\xa7\xcf\xc9\x5f\xd8\xe6\xd7\x97\x5a\x5f\x4e\x35\xbe\xbd\x21\xf5\xdd\x07\x90\xdf\x9d\xf1\x6d\x7f\xd2\x9b\x3f\xde\xfc\x07\x07\x9d\x5b\x74\x10\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12560, mode: os.FileMode(0666), modTime: time.Unix(1646602950, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x49, 0x3, 0xfc, 0x86, 0x12, 0x92, 0x76, 0x46, 0xa7, 0x1d, 0x83, 0xf4, 0xaa, 0x88, 0x9b, 0xcf, 0x68, 0xb0, 0x6, 0x36, 0x4b, 0x3f, 0x67, 0x83, 0x6a, 0xfa, 0xfa, 0x67, 0x3, 0x76, 0x1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Discord.lnk":        discordLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Discord.lnk": {discordLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
