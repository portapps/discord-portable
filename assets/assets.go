// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Discord.lnk (1.9kB)
// res/pinned_update.json (12.56kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x23\x65\x18\xc7\x7f\x69\x2b\xda\x93\x11\x43\xa0\x55\x49\xaa\xa6\x08\x3a\x93\x8f\xa6\x21\x4d\x51\x5a\xf3\x61\x4a\x12\x1a\x12\x62\x43\x1d\xa5\xe3\x64\xa0\x43\x1b\x32\x9d\x49\xa1\xad\x78\xf4\x52\x2c\x08\x1e\x0c\x58\x69\x11\x41\x29\x78\x10\x3c\x08\x8a\x78\xf0\x2c\x3d\x54\xf1\x68\x2b\x82\x14\x41\x41\x3c\xd5\x65\x97\x79\x33\x29\x9b\xb4\xcb\x1e\xf6\xb4\xcb\xfe\x87\x79\xbf\x9e\xff\xfb\x7f\x3e\x12\x9e\x29\x02\x1e\xdf\x10\x0e\x7e\x10\x23\xb9\x9b\x73\x10\x04\xfe\xb9\xf1\xdf\xc5\xd0\xda\x89\xe7\x1b\xff\xdb\xa3\xc3\x6b\x27\x9e\xde\x1e\x17\x97\x0b\x17\x7f\xe0\x23\x50\xfe\x6d\xf1\x38\x78\x9e\x32\xbc\x9f\xfe\xfa\x18\x2f\x46\x22\x9f\x8c\x11\x4e\xa7\x14\xae\xe2\x75\xa2\x62\x5e\x2a\x2d\x77\xbc\x64\x0c\x5b\x6b\x59\x0d\xe6\x18\x65\x84\xbf\xbf\x5f\x2a\xbd\xda\x71\x2c\x32\x50\x7f\xce\xe1\xbd\x35\x70\x7f\xf9\xf1\x80\x27\x83\x81\x8d\x46\x0b\x8b\x06\xe0\x67\x85\x98\xab\x5a\xef\x04\xa9\x99\x0d\xb5\xad\xcb\xfa\x96\x0e\xb9\x4b\xe5\x7a\xc7\x79\x1d\xe5\xa3\x09\x87\xbb\x3f\xd2\xaf\xec\x7d\xc5\xe7\xa9\x61\xd2\x40\xa5\x8d\x8e\x8c\xce\x16\x3a\x30\x0e\x38\x25\x7b\xda\x4d\xdf\x99\xa7\xdd\x5b\x05\x60\x0c\x18\x06\x12\xaf\xfd\x3e\xe2\x05\x32\xc6\xf3\x1b\x9b\x7a\x30\x4d\x3a\xa5\xb8\x19\x2a\xb7\xc7\x34\x41\x7f\x06\x41\x24\x82\xac\xd2\xa6\x8d\x89\x4d\x8a\x30\x61\x1a\x7d\x1c\x15\x13\x13\x59\xec\x9b\x84\x79\x0a\x19\x19\xa5\x6f\xec\x57\x55\xb8\x2e\x1b\x3f\x69\x52\xd7\x70\xbb\xfa\x12\x11\x64\xf1\x4e\x11\x21\xca\x38\x12\x12\x26\x16\x2d\x34\x74\x6c\x6c\xaa\xb4\x51\xb1\x68\x13\x1c\x50\xe9\xf9\x78\xc9\xf5\x51\xc3\x46\xc7\xc2\x46\x41\xc3\x42\x65\x87\x6d\x14\xe6\x85\xaf\x8c\x88\x4c\x45\xa1\x28\xd4\x55\xd6\xef\x18\x97\x8c\x21\xce\x7c\xc3\xf0\x28\x1c\x86\x6a\xd5\x6c\xa5\x5c\x59\xcc\x2d\x14\xb3\x21\x65\xde\x34\x33\x6a\x5b\x55\x8a\x2d\x4d\x5d\xbf\xac\xb8\x6a\x9a\xb2\xa1\xb5\xae\xf9\x0f\x3e\x18\x08\x51\xa3\x4a\x96\x0a\x65\x2a\x2c\x92\x63\x81\x22\x59\x42\xf7\x54\xe1\x87\xb8\xdf\xb0\xd2\xed\x3e\x87\x75\x77\xaf\x59\xea\xce\xb6\x64\x6a\x3d\xfb\xbe\xfd\xec\xc5\x8f\x67\x6f\x16\x8e\x3e\x4a\x4c\xce\x9e\x97\x0f\x62\xef\x7e\x3c\x5e\xfa\xe5\xcf\x27\xde\xfb\x20\xb3\xfb\x46\xf3\xeb\xbf\xee\x66\x9f\xf5\xc0\x28\x1c\xee\x01\xd1\x6a\xb9\x7a\xb6\x5b\xcf\x7d\x57\x4c\xa6\xbf\xfd\xff\xc9\x0f\x27\x3b\xcd\x9f\x36\x00\xd1\x4a\x03\x40\x18\xa8\x22\x11\x45\x62\x1a\x89\x98\x58\x4d\x89\x76\x92\x60\x8a\x24\x51\x62\xc4\x89\x21\x11\x27\x22\x9e\xa4\xb0\xc4\x49\x08\x6e\x94\x38\x49\x62\x24\x89\x10\x13\xcf\x8c\x38\x8d\x88\x86\xd4\x83\xe1\x06\x53\x7b\xa1\x78\xb0\x7d\x30\x53\xf8\xe2\xf8\xf4\x44\x3a\xfd\xf9\xdf\x12\xf0\x48\x2f\x98\x67\x9c\x6a\x88\x7e\x29\x63\xb3\xc1\x26\x06\x16\x16\x3a\xeb\xc8\x57\x7a\xd7\xe0\x57\xa5\x8b\x19\xd7\xd1\x57\xfe\x66\xe6\xcb\x3d\x33\xff\x79\x7e\x4e\xfe\xec\xe5\xad\xf7\x1d\xed\x55\x87\x90\x77\xca\xff\x4e\x21\xdf\xa5\x97\x03\x83\x3f\xcf\xad\x00\x00\x00\xff\xff\x6e\xf0\xe7\x2c\x6c\x07\x00\x00")

func discordLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordLnk,
		"Discord.lnk",
	)
}

func discordLnk() (*asset, error) {
	bytes, err := discordLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Discord.lnk", size: 1900, mode: os.FileMode(0666), modTime: time.Unix(1540321391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6c, 0x22, 0x76, 0x62, 0x29, 0xe1, 0xa8, 0x19, 0xde, 0xc6, 0x8e, 0xf1, 0x2e, 0x96, 0x78, 0xe6, 0x7f, 0xf, 0xe9, 0x3d, 0x65, 0xdd, 0x53, 0xae, 0x61, 0x66, 0xdf, 0xc4, 0x70, 0x21, 0x68}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9a\xef\x4e\x25\xc7\x8e\xc0\xbf\xe7\x29\x10\x9f\x57\x83\xed\x72\xb9\x5c\x79\x95\xab\x28\xf2\xdf\x0c\x0a\x19\x58\x60\xb2\x7b\x75\x95\x77\x5f\x41\x80\x39\xcc\x4e\x26\x23\x74\x8f\x86\xcb\x37\xea\x34\x74\x77\xfd\xfa\x87\x8f\xed\xf6\xbf\x7e\x38\x39\x39\xfd\xed\x32\x3f\x5e\xd4\xcd\xe9\x8f\x27\x77\xcb\x93\x93\xd3\x3c\xbf\x89\xcb\xeb\xfc\x39\x2e\x2e\x3f\xe6\xcd\x3f\x3f\xc4\xd3\xa1\x93\x93\xd3\xfe\x78\x71\x71\xb0\x3e\x39\x39\x7d\x7f\x79\x73\xfb\xf3\xef\x75\x7d\x73\x7e\xf9\xe1\xf4\xc7\x93\x7f\x3c\x1d\x39\x39\xc1\xff\x3a\x58\xc0\xe1\x62\x03\xd0\xd3\xf2\xa7\x4f\x47\x1e\xee\xe6\xe0\x7c\x07\xe7\x38\xbd\xb2\xf8\xd5\x7e\xa9\x9f\x6f\xde\x1b\x4d\x39\xfd\xf1\xe4\x34\xd0\xa0\x57\x67\x11\x6e\x66\xe9\x61\x73\x0a\xac\xe4\x88\x31\xd5\xa9\xb4\xb6\x20\x27\xab\x44\x2c\x9a\xe2\xb4\xd4\x82\xab\x46\x48\x2f\x3a\x3d\x38\xfb\xc7\xeb\xbb\x9d\x9d\xbe\xbf\xbd\xbd\xba\xf9\xf1\xec\x2c\x2f\xde\x3d\x90\xb0\xab\xab\x77\x1f\xea\xf6\x2c\xcf\x6f\x6e\xaf\x2f\xcf\xec\xea\xea\xec\xe6\xd6\xfc\xa2\xce\xfe\xe7\xfc\xc3\xd9\xff\xaa\x9c\xe1\x3b\x78\x77\xb7\xa5\xb3\xff\xc7\xee\x0c\xcf\xee\x90\xbd\xfb\xf3\x6f\x4f\x1f\xae\xf6\xc7\xe3\x65\x4f\xb3\x2e\x6e\xed\xe6\x19\xb7\x7f\x1d\x70\xfa\x1a\xdd\xcf\xf8\x7e\x46\xf8\x9e\x31\x1e\x7c\xf0\xd3\xe1\xd1\xaf\x72\xfe\x22\x69\x4b\x62\x9e\x5d\x5b\x6d\xb0\xce\x3d\xa4\xd8\x70\x72\xb1\x99\x39\xd6\x94\xb6\xf0\x99\x96\xec\x05\xc2\x73\x18\x6d\xd6\x05\x43\x4b\x25\xf5\xf4\xd9\xf9\x8f\xc6\xfa\xfa\xf2\xb7\xc7\xdf\xc0\x33\x3c\x7d\xba\xe6\x1f\x0f\x3f\xfd\xf4\xc3\x01\xff\x27\xd5\xeb\xfa\xe2\x6e\xc7\xaf\x59\x74\xb1\x34\x6b\x4b\xc2\x66\xef\x56\x22\x11\x80\x5c\x93\x97\xee\x45\xad\x39\x46\x20\x3a\x2a\x8f\x61\xe5\x1c\x6a\x3a\x6c\xb7\x78\x4d\x9d\xc7\x12\xfd\x81\xdc\x9b\xd1\x7c\x9b\x51\xe3\x9a\x2b\x6b\xb2\x4e\x22\x08\x69\xc8\x76\x05\x73\x4c\x1b\x10\x88\xea\xbd\x78\x4d\x91\xce\xdd\x73\xed\xf2\x45\xaa\x99\x8c\x7c\x3c\xcd\x0f\x48\xbf\x4c\xf2\xac\x9b\x5f\x6f\x2f\xaf\x7e\x8e\xcb\xeb\xfa\xae\xa6\x8f\xaf\x9a\x3e\x49\x55\x63\x6c\x5a\xda\xd0\x59\x31\x36\x68\x00\x43\x8d\x1a\x11\x40\x9a\x1c\x28\x2c\xab\xdb\x15\x97\xad\xd6\x29\xe1\x0b\x8c\x72\x89\x1e\xcb\xf4\x43\x7c\x67\xe3\x7b\xea\x4e\xdf\xae\x3b\xfd\x8d\xee\xdd\xe8\xb4\x2b\x56\xf6\x18\xb3\xa7\x4b\x6e\x72\x59\xdb\x06\x36\x27\xa1\x52\x2c\x19\x7b\x8f\x09\x8e\x60\xa3\xd8\x48\xd7\x2c\xf7\xd5\x3a\xf6\xf1\x74\xff\x1c\xf7\x81\xf3\x74\x46\xdf\xec\xfc\xf9\xcd\x95\xdd\xc6\xfb\x57\x1c\xd9\xbb\x88\xb7\xae\x69\x42\x7b\xae\xbb\x47\x50\x19\x01\x0e\x1a\x65\x04\x1d\x52\xbe\x7b\x28\xa9\x69\x92\xd9\x5a\x82\x55\x58\x49\x4e\x05\xf3\x68\x91\xfd\x11\xdd\x9b\x09\xed\x10\xbb\x89\x7d\xcb\x60\x5c\x69\xbe\x51\x81\xa5\x22\x26\x86\x49\xce\x4d\xdc\x21\x31\x0a\x79\x8f\x91\x80\x93\x37\x6e\xd4\x12\xf6\x5e\x2a\x47\x74\xfd\x00\xf5\xcb\x62\xfb\xaf\xd7\xe7\x37\x57\xaf\x58\x72\xf1\x96\x30\x18\xea\x93\x3d\x26\xf4\x86\x3d\x8d\x6b\x5b\x8c\x30\xa9\xd9\xda\x5a\x66\xfb\xee\xd9\xc0\xf6\xd2\x31\x74\x11\x2f\x20\x45\x08\x3e\x96\xe4\xf7\xdc\xde\x8c\xe1\xbe\xbc\x68\xad\xb5\x83\xc7\x00\x9b\xaa\xb2\x8a\x15\x69\x3b\x8e\xbb\x6c\xbc\x43\x75\x77\x31\x66\x0b\xba\xe3\xe2\x21\xb5\x55\x27\xb0\xfb\x3a\x62\xf2\xf2\xc4\xf9\x65\x7a\x7f\x5e\xa3\xbe\x3e\xc1\x93\x7c\xb3\x4f\x6c\x04\x26\x9c\x7b\xe2\x04\xab\xa8\x66\x41\x56\x63\xa0\x64\xea\x5c\x3e\xbd\x4c\x2d\x39\x7d\x82\xae\x4d\xab\x9b\x58\x8e\x56\x88\x3e\x90\x7b\x33\x8a\x33\x12\x4f\x05\xda\x34\x80\xcd\xc7\x1a\xbc\x50\xa7\xe7\x6e\xed\x55\xb4\x97\x9b\xc5\x06\x85\x5e\x9e\x6b\x2f\x03\xef\xc8\xca\x59\x63\x44\xe0\xf1\x14\x3f\x20\xfd\x32\xc9\x2f\x7f\xaf\xeb\x0b\xfb\x27\xbd\x62\xcb\x69\x8d\x18\x5b\x6c\x0a\x0b\x4a\xd5\x30\x67\x5d\x73\xe2\x94\xb1\x09\x36\x6e\x92\x95\x2e\xa5\x33\x92\xca\xb4\x7a\xc8\xf0\x3b\x0e\xb2\x81\xd7\xb1\x2c\x7f\x44\xf7\x66\x34\x57\x58\x39\xb7\x93\xab\x01\x20\x8c\xa4\x09\xa3\x28\x59\x52\xa2\xd2\x66\xe1\x1a\x29\xb1\xa2\x6d\xad\x8c\x11\x2d\x98\x29\x7b\x73\x68\x66\x1e\x4f\xf3\x43\xd4\x2f\xf3\xfc\xe6\xaa\x2e\x2e\xe2\x7d\xbd\xea\x7e\x4b\x8d\x89\xab\x57\xc8\x36\x4a\x07\x76\x96\xf6\x3d\xd8\xcd\x83\x05\x61\x4a\x26\x70\x31\x22\x0c\x1d\xb3\x65\x01\xd4\x94\xbb\x12\x35\xa1\xaa\x8f\x65\xfa\x27\x78\x6f\xc6\x75\x73\xce\xa5\x7b\xab\x01\xee\x89\x3c\x74\xe1\x44\x5e\xcd\xe2\xbc\x78\xec\x96\x9d\x36\xd6\x5a\x05\xa8\xe0\xad\x00\x6c\x94\x04\x8b\x94\xe4\x88\x59\xcb\x73\xd8\x2f\xb3\xfd\xfd\xe5\xe5\xf7\xf5\x9c\xbe\xea\x39\xc6\x18\x32\xba\x5a\x51\x5a\x52\xd5\x07\x4c\x86\x08\x12\x8a\x65\xdb\x91\x0a\x1a\x02\x60\x4e\x85\x04\xa8\x76\xa2\x3d\x74\x4b\x2c\xe9\x3a\x96\xe7\x77\xd8\xce\xe8\x3f\xa4\xcb\xf2\x77\x86\xcf\x65\x30\xf7\x84\x39\xd2\x00\x33\x5b\x97\x89\x01\x4d\x29\xac\x19\x1b\xc7\xd8\x53\xbc\xdd\x45\x56\xcc\xc1\xd8\x22\x3e\x07\x0f\x4f\x1c\xdb\x8e\x67\xf8\x23\xe6\x67\xdd\x95\x6f\x4f\xcb\x2b\xcf\xed\x15\x07\xf1\xa4\xf6\x31\x99\xda\xba\x8a\x98\x18\x3d\x9a\xb2\x21\xcd\x7a\x55\x20\xc2\x9e\x9c\x43\xe6\x86\xc0\x50\xe2\x9d\x45\x30\x47\x53\x1a\x1e\xaf\xb5\x72\xcf\xed\xcd\xc4\x6f\xb7\x85\x9b\x2d\x88\x3d\x76\xcc\x1e\xd4\xee\x45\xa5\x61\x2c\x4e\x89\x94\x63\x42\x60\x02\xdc\x7d\x0c\x7b\x44\x6c\x71\x0f\xaf\x5a\x6b\xae\x23\xa6\xe4\x8f\x9c\x5f\x16\xba\x3f\xde\x9e\x5f\xbc\xe6\x9a\xd3\x44\xb5\x4c\x65\x85\x24\x3b\xe2\x2c\xda\x86\x03\x62\xa5\xf4\x98\x01\x3c\x0a\x2b\xdb\x07\x12\xf8\x44\x4e\x01\x43\x52\x16\xdf\x13\x7b\x1c\x4b\xef\x7b\x6e\x6f\x46\x6f\x20\x4d\x71\x1f\x63\x22\x87\xa1\x6c\x4a\x1c\x63\x30\x70\xc3\x58\x23\x34\xdb\xa1\x70\xf6\x56\xb0\xe5\x5a\x7b\xb0\x69\x7b\x93\x0f\x51\x1c\xc7\xd3\xfb\x89\xf3\xcb\xf4\xfe\xc5\x7e\xab\x57\xef\x78\x8b\xde\xd5\x42\xcb\xac\x52\x6c\x73\x48\xe1\xcc\xc9\xc2\x34\x74\x1b\x72\x67\x0f\x00\xd5\xbd\x28\xfe\xcc\x5e\x16\xf4\xe6\x98\x5c\xa1\x7e\xb4\x10\xfe\x09\xde\xdb\x11\xdd\x1c\x51\x06\xac\x31\x5b\xdb\x51\x17\x68\x56\x22\xee\x69\xbd\x47\x96\x79\xd0\x14\x1c\x2c\xc2\x9a\x31\x3d\x4b\xcb\x9c\x8c\x9a\x95\x8e\x98\xa5\x3c\x87\xfd\x32\xdb\x7f\xbf\x3c\x8f\xef\xfb\xda\x73\x7f\xbd\xe0\xf4\xb5\xc1\x07\x8e\xd2\x6a\x8b\x20\x08\x65\xee\x51\x1e\x59\x79\x57\xf5\xf3\xd2\x85\xcb\x28\x01\x14\x4a\x9d\x1d\x52\x45\xa9\x2c\x9d\xe2\x58\xa2\xdf\x73\x3b\xdb\xff\x21\x99\xb8\xfe\x8d\xe3\xa8\x0e\x23\xbb\x9d\x63\x93\xec\xa4\xc5\x1b\x21\x48\xa5\xc2\x06\x06\x59\x9a\xc1\x5a\x94\x3a\x36\xe2\x54\x06\x18\x73\xed\xe9\x36\x57\x3e\x1b\xa3\x38\x16\xe7\x67\xa9\xb8\x7e\xab\xde\xd7\x57\xaf\x79\x4c\x2b\x49\x65\xb8\x50\x86\xee\x66\xf3\x76\x4c\xed\x1e\x9b\xc8\x7a\x34\x22\x2b\x80\x81\xf5\xc0\xb4\xa6\x5c\x33\x54\x75\x0d\x25\xae\x8a\x3c\x5a\x37\xe5\xfa\xea\xed\x0c\x68\x95\x66\x19\xf6\x2e\x92\x8a\xda\xd5\xe0\xad\xbd\x72\x4e\xa7\x89\x73\x4d\x53\x74\x42\x72\x30\xb2\x99\x56\xfb\x2e\xd6\x7b\x6e\xb7\x41\xe6\x47\x7c\xbd\xf9\x40\xf9\x85\xdd\xc2\xfa\xf5\xfa\xfc\xf6\x15\xbb\xad\xaa\x90\x7b\x60\xd4\x6e\xc1\x4e\xc5\x94\xd5\x40\x66\xf7\x13\x89\xa0\x7b\x14\xac\xc6\x1d\x29\x4c\x52\xad\x03\x27\x00\xb6\xd3\xd8\x2e\xfb\x68\x9d\xc2\x7b\x70\x6f\x46\xef\xa0\x6d\xbe\x26\x4e\xc2\x29\xbb\x5b\x2d\xd7\x62\x4e\x07\x1b\xc2\x21\xa0\x56\x5a\x38\x1d\x16\xa1\xf6\xb4\x85\xbd\x76\x05\x5a\x14\x46\x1f\xb1\x23\xfe\x09\xf4\x0b\x33\x93\xf3\x5f\xce\x2f\xec\xc3\xed\xf7\xcd\x4e\xfe\xee\xc5\x8f\xcb\x28\x96\x8c\x71\xe7\xf0\x6e\x70\xc9\x29\x41\x35\x4d\x17\x35\x71\x84\x8d\x3d\x29\x77\xb6\xe2\x1c\xb6\x61\xde\x8f\x6c\x05\x52\x97\x1d\x2d\x3b\x79\x64\xf7\x66\x3c\x67\x0b\x92\xbd\xd0\xa0\x75\xcf\x15\x56\x2b\x23\x0a\xd3\x53\x60\xfb\x9c\xce\x6b\x29\x90\x90\x72\x25\x4f\xce\x14\xa3\x8a\xd8\x3d\x67\x8e\x38\x62\x86\x72\xc8\xfa\x1b\x55\xff\xe1\xe1\x19\x3c\xf7\xf9\xaf\x68\x3f\xb1\x79\x22\xfc\xe4\xef\x03\xd5\x2f\x7d\xef\x91\x01\xf6\x9e\x4a\xac\xce\xe1\x84\xd6\x24\x93\xbc\x83\xb4\x8a\x8d\x7b\x0e\x18\xc2\x16\x31\x2b\x7b\x1b\xa7\xf3\x76\x45\x24\x5e\xf6\xd8\x7e\xfa\xb7\xa0\xfa\x4c\xc1\x3f\xb7\xfe\x99\x7a\x4f\xff\xe2\x7f\xa9\xdc\x81\x22\x07\xaa\x1d\x68\xf6\xa4\xd8\x97\x32\x5c\xc1\x34\xe3\x08\x19\xb5\x72\xac\x69\xbb\x78\x38\x81\x33\xeb\x12\xe1\xde\xe2\x38\x6c\xb1\x30\x37\xb7\x01\x6d\x50\xad\x9c\x54\x04\xeb\x53\x86\xfb\xef\x01\x72\xe8\xc9\xe9\x93\x13\xf7\x1b\x38\xbd\xae\xff\xfe\x78\x7e\x5d\x87\xe3\x1d\xff\x78\x1e\x1a\x9f\x8d\xac\x7e\x16\x36\x1f\x67\xb6\xff\xfa\xed\xe2\x17\xdb\x79\x5f\x2c\x0b\xef\x6e\xe9\x87\x3f\x7e\xf8\xbf\x00\x00\x00\xff\xff\x02\xf0\xc1\x75\x10\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12560, mode: os.FileMode(0666), modTime: time.Unix(1630450574, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0x68, 0x9b, 0xc9, 0x22, 0xb4, 0x4, 0x6b, 0xae, 0x9a, 0xbe, 0xd4, 0x3e, 0x2f, 0xfb, 0xef, 0x58, 0xd6, 0x1, 0x2a, 0xbe, 0x8c, 0xc7, 0x7f, 0x1b, 0x30, 0x28, 0x6e, 0x3, 0xf8, 0xed, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Discord.lnk":        discordLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Discord.lnk": {discordLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
